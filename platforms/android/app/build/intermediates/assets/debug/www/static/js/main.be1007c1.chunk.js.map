{"version":3,"sources":["Components/Menu/styles.module.css","Components/Home/Home.js","Components/About/index.js","Components/Menu/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","clicker","menuBtn","menu","menuWrap","nav","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","Component","About","saveString","localStorage","setItem","string","getString","storageString","setState","localStorageString","_this2","type","value","onChange","e","target","onClick","Menu","_ref","menuActive","toggleMenu","closeMenu","classNames","styles","role","tabIndex","NavLink","to","App","prevState","react","Components_Menu","id","Switch","Route","path","exact","component","Redirect","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be1007c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clicker\":\"styles_clicker__1SnBa\",\"menuBtn\":\"styles_menuBtn__1YaRd\",\"menu\":\"styles_menu__3xLzE\",\"menuWrap\":\"styles_menuWrap__7zyxc\",\"nav\":\"styles_nav__Skrvp\"};","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"container\">\r\n          <div className=\"block\">\r\n            <p>This is the Home page.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n\r\nclass About extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      localStorageString: '',\r\n      string: ''\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getString();\r\n  }\r\n  saveString = () => {\r\n    localStorage.setItem('storageString', this.state.string);\r\n    this.getString();\r\n  }\r\n  getString = () => {\r\n    const { storageString } = localStorage;\r\n    this.setState({ localStorageString: storageString });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"container\">\r\n          <div className=\"block\">\r\n            <input type=\"text\" value={this.state.string} onChange={(e) => { this.setState({ string: e.target.value }); }} />\r\n            <button onClick={this.saveString} type=\"button\">Save</button>\r\n            <br />\r\n            <p>{this.state.localStorageString ? this.state.localStorageString : ''}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nimport styles from './styles.module.css';\r\n\r\nconst Menu = ({ menuActive, toggleMenu, closeMenu }) => {\r\n  return (\r\n    <div className={classNames(styles.menuWrap, menuActive)}>\r\n      <div className={styles.clicker} onClick={toggleMenu} role=\"button\" tabIndex=\"-1\">\r\n        <span className={styles.menuBtn} />\r\n      </div>\r\n      <div className={styles.menu}>\r\n        <ul className={styles.nav}>\r\n          <li><NavLink to=\"/home\" onClick={closeMenu}>home</NavLink></li>\r\n          <li><NavLink to=\"/about\" onClick={closeMenu}>about</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { Fragment, Component } from 'react';\nimport {\n  Switch, Route, Redirect\n} from 'react-router-dom';\n\nimport Home from './Components/Home/Home';\nimport About from './Components/About';\nimport Menu from './Components/Menu';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      menuActive: false\n    };\n  }\n  toggleMenu = () => {\n    this.setState(prevState => (\n      { menuActive: !prevState.menuActive }\n    ));\n  }\n  closeMenu = () => {\n    this.setState({\n      menuActive: false\n    });\n  }\n  render() {\n    const menuActive = this.state.menuActive ? 'active' : 'not';\n    return (\n      <Fragment>\n        <Menu menuActive={menuActive} toggleMenu={this.toggleMenu} closeMenu={this.closeMenu} />\n        <div id=\"wrapper\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/home\" exact component={Home} />\n            <Route path=\"/about\" exact component={About} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './Styles/global.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}